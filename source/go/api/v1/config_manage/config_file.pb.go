// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.33.0
// 	protoc        v5.27.3
// source: config_file.proto

package config_manage

import (
	model "github.com/polarismesh/specification/source/go/api/v1/model"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	wrapperspb "google.golang.org/protobuf/types/known/wrapperspb"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type ConfigFilePullClient int32

const (
	ConfigFilePullClient_CLIENT_SDK   ConfigFilePullClient = 0 // 配置文件仅能被SDK拉取
	ConfigFilePullClient_CLIENT_AGENT ConfigFilePullClient = 1 // 配置文件仅能被Agent拉取
	ConfigFilePullClient_CLIENT_ALL   ConfigFilePullClient = 2 // 配置文件可以被SDK及Agent同时拉取
)

// Enum value maps for ConfigFilePullClient.
var (
	ConfigFilePullClient_name = map[int32]string{
		0: "CLIENT_SDK",
		1: "CLIENT_AGENT",
		2: "CLIENT_ALL",
	}
	ConfigFilePullClient_value = map[string]int32{
		"CLIENT_SDK":   0,
		"CLIENT_AGENT": 1,
		"CLIENT_ALL":   2,
	}
)

func (x ConfigFilePullClient) Enum() *ConfigFilePullClient {
	p := new(ConfigFilePullClient)
	*p = x
	return p
}

func (x ConfigFilePullClient) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConfigFilePullClient) Descriptor() protoreflect.EnumDescriptor {
	return file_config_file_proto_enumTypes[0].Descriptor()
}

func (ConfigFilePullClient) Type() protoreflect.EnumType {
	return &file_config_file_proto_enumTypes[0]
}

func (x ConfigFilePullClient) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConfigFilePullClient.Descriptor instead.
func (ConfigFilePullClient) EnumDescriptor() ([]byte, []int) {
	return file_config_file_proto_rawDescGZIP(), []int{0}
}

type ConfigRequestMode int32

const (
	ConfigRequestMode_Default ConfigRequestMode = 0
	ConfigRequestMode_SDK     ConfigRequestMode = 1
	ConfigRequestMode_Agent   ConfigRequestMode = 2
)

// Enum value maps for ConfigRequestMode.
var (
	ConfigRequestMode_name = map[int32]string{
		0: "Default",
		1: "SDK",
		2: "Agent",
	}
	ConfigRequestMode_value = map[string]int32{
		"Default": 0,
		"SDK":     1,
		"Agent":   2,
	}
)

func (x ConfigRequestMode) Enum() *ConfigRequestMode {
	p := new(ConfigRequestMode)
	*p = x
	return p
}

func (x ConfigRequestMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConfigRequestMode) Descriptor() protoreflect.EnumDescriptor {
	return file_config_file_proto_enumTypes[1].Descriptor()
}

func (ConfigRequestMode) Type() protoreflect.EnumType {
	return &file_config_file_proto_enumTypes[1]
}

func (x ConfigRequestMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConfigRequestMode.Descriptor instead.
func (ConfigRequestMode) EnumDescriptor() ([]byte, []int) {
	return file_config_file_proto_rawDescGZIP(), []int{1}
}

type ConfigDiscoverRequest_ConfigDiscoverRequestType int32

const (
	ConfigDiscoverRequest_UNKNOWN            ConfigDiscoverRequest_ConfigDiscoverRequestType = 0
	ConfigDiscoverRequest_CONFIG_FILE        ConfigDiscoverRequest_ConfigDiscoverRequestType = 1
	ConfigDiscoverRequest_CONFIG_FILE_Names  ConfigDiscoverRequest_ConfigDiscoverRequestType = 2
	ConfigDiscoverRequest_CONFIG_FILE_GROUPS ConfigDiscoverRequest_ConfigDiscoverRequestType = 3
)

// Enum value maps for ConfigDiscoverRequest_ConfigDiscoverRequestType.
var (
	ConfigDiscoverRequest_ConfigDiscoverRequestType_name = map[int32]string{
		0: "UNKNOWN",
		1: "CONFIG_FILE",
		2: "CONFIG_FILE_Names",
		3: "CONFIG_FILE_GROUPS",
	}
	ConfigDiscoverRequest_ConfigDiscoverRequestType_value = map[string]int32{
		"UNKNOWN":            0,
		"CONFIG_FILE":        1,
		"CONFIG_FILE_Names":  2,
		"CONFIG_FILE_GROUPS": 3,
	}
)

func (x ConfigDiscoverRequest_ConfigDiscoverRequestType) Enum() *ConfigDiscoverRequest_ConfigDiscoverRequestType {
	p := new(ConfigDiscoverRequest_ConfigDiscoverRequestType)
	*p = x
	return p
}

func (x ConfigDiscoverRequest_ConfigDiscoverRequestType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConfigDiscoverRequest_ConfigDiscoverRequestType) Descriptor() protoreflect.EnumDescriptor {
	return file_config_file_proto_enumTypes[2].Descriptor()
}

func (ConfigDiscoverRequest_ConfigDiscoverRequestType) Type() protoreflect.EnumType {
	return &file_config_file_proto_enumTypes[2]
}

func (x ConfigDiscoverRequest_ConfigDiscoverRequestType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConfigDiscoverRequest_ConfigDiscoverRequestType.Descriptor instead.
func (ConfigDiscoverRequest_ConfigDiscoverRequestType) EnumDescriptor() ([]byte, []int) {
	return file_config_file_proto_rawDescGZIP(), []int{12, 0}
}

type ConfigDiscoverResponse_ConfigDiscoverResponseType int32

const (
	ConfigDiscoverResponse_UNKNOWN            ConfigDiscoverResponse_ConfigDiscoverResponseType = 0
	ConfigDiscoverResponse_CONFIG_FILE        ConfigDiscoverResponse_ConfigDiscoverResponseType = 1
	ConfigDiscoverResponse_CONFIG_FILE_Names  ConfigDiscoverResponse_ConfigDiscoverResponseType = 2
	ConfigDiscoverResponse_CONFIG_FILE_GROUPS ConfigDiscoverResponse_ConfigDiscoverResponseType = 3
)

// Enum value maps for ConfigDiscoverResponse_ConfigDiscoverResponseType.
var (
	ConfigDiscoverResponse_ConfigDiscoverResponseType_name = map[int32]string{
		0: "UNKNOWN",
		1: "CONFIG_FILE",
		2: "CONFIG_FILE_Names",
		3: "CONFIG_FILE_GROUPS",
	}
	ConfigDiscoverResponse_ConfigDiscoverResponseType_value = map[string]int32{
		"UNKNOWN":            0,
		"CONFIG_FILE":        1,
		"CONFIG_FILE_Names":  2,
		"CONFIG_FILE_GROUPS": 3,
	}
)

func (x ConfigDiscoverResponse_ConfigDiscoverResponseType) Enum() *ConfigDiscoverResponse_ConfigDiscoverResponseType {
	p := new(ConfigDiscoverResponse_ConfigDiscoverResponseType)
	*p = x
	return p
}

func (x ConfigDiscoverResponse_ConfigDiscoverResponseType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ConfigDiscoverResponse_ConfigDiscoverResponseType) Descriptor() protoreflect.EnumDescriptor {
	return file_config_file_proto_enumTypes[3].Descriptor()
}

func (ConfigDiscoverResponse_ConfigDiscoverResponseType) Type() protoreflect.EnumType {
	return &file_config_file_proto_enumTypes[3]
}

func (x ConfigDiscoverResponse_ConfigDiscoverResponseType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ConfigDiscoverResponse_ConfigDiscoverResponseType.Descriptor instead.
func (ConfigDiscoverResponse_ConfigDiscoverResponseType) EnumDescriptor() ([]byte, []int) {
	return file_config_file_proto_rawDescGZIP(), []int{13, 0}
}

type ConfigFileGroup struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id             *wrapperspb.UInt64Value   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name           *wrapperspb.StringValue   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Namespace      *wrapperspb.StringValue   `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Comment        *wrapperspb.StringValue   `protobuf:"bytes,4,opt,name=comment,proto3" json:"comment,omitempty"`
	CreateTime     *wrapperspb.StringValue   `protobuf:"bytes,5,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	CreateBy       *wrapperspb.StringValue   `protobuf:"bytes,6,opt,name=create_by,json=createBy,proto3" json:"create_by,omitempty"`
	ModifyTime     *wrapperspb.StringValue   `protobuf:"bytes,7,opt,name=modify_time,json=modifyTime,proto3" json:"modify_time,omitempty"`
	ModifyBy       *wrapperspb.StringValue   `protobuf:"bytes,8,opt,name=modify_by,json=modifyBy,proto3" json:"modify_by,omitempty"`
	FileCount      *wrapperspb.UInt64Value   `protobuf:"bytes,9,opt,name=fileCount,proto3" json:"fileCount,omitempty"`
	UserIds        []*wrapperspb.StringValue `protobuf:"bytes,10,rep,name=user_ids,proto3" json:"user_ids,omitempty"`
	GroupIds       []*wrapperspb.StringValue `protobuf:"bytes,11,rep,name=group_ids,proto3" json:"group_ids,omitempty"`
	RemoveUserIds  []*wrapperspb.StringValue `protobuf:"bytes,13,rep,name=remove_user_ids,proto3" json:"remove_user_ids,omitempty"`
	RemoveGroupIds []*wrapperspb.StringValue `protobuf:"bytes,14,rep,name=remove_group_ids,proto3" json:"remove_group_ids,omitempty"`
	Editable       *wrapperspb.BoolValue     `protobuf:"bytes,15,opt,name=editable,proto3" json:"editable,omitempty"`
	Owner          *wrapperspb.StringValue   `protobuf:"bytes,16,opt,name=owner,proto3" json:"owner,omitempty"`
	Business       *wrapperspb.StringValue   `protobuf:"bytes,17,opt,name=business,proto3" json:"business,omitempty"`
	Department     *wrapperspb.StringValue   `protobuf:"bytes,18,opt,name=department,proto3" json:"department,omitempty"`
	Metadata       map[string]string         `protobuf:"bytes,19,rep,name=metadata,proto3" json:"metadata,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	// 删除操作标志位
	Deleteable *wrapperspb.BoolValue `protobuf:"bytes,20,opt,name=deleteable,proto3" json:"deleteable,omitempty"`
}

func (x *ConfigFileGroup) Reset() {
	*x = ConfigFileGroup{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_file_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigFileGroup) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigFileGroup) ProtoMessage() {}

func (x *ConfigFileGroup) ProtoReflect() protoreflect.Message {
	mi := &file_config_file_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigFileGroup.ProtoReflect.Descriptor instead.
func (*ConfigFileGroup) Descriptor() ([]byte, []int) {
	return file_config_file_proto_rawDescGZIP(), []int{0}
}

func (x *ConfigFileGroup) GetId() *wrapperspb.UInt64Value {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ConfigFileGroup) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *ConfigFileGroup) GetNamespace() *wrapperspb.StringValue {
	if x != nil {
		return x.Namespace
	}
	return nil
}

func (x *ConfigFileGroup) GetComment() *wrapperspb.StringValue {
	if x != nil {
		return x.Comment
	}
	return nil
}

func (x *ConfigFileGroup) GetCreateTime() *wrapperspb.StringValue {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *ConfigFileGroup) GetCreateBy() *wrapperspb.StringValue {
	if x != nil {
		return x.CreateBy
	}
	return nil
}

func (x *ConfigFileGroup) GetModifyTime() *wrapperspb.StringValue {
	if x != nil {
		return x.ModifyTime
	}
	return nil
}

func (x *ConfigFileGroup) GetModifyBy() *wrapperspb.StringValue {
	if x != nil {
		return x.ModifyBy
	}
	return nil
}

func (x *ConfigFileGroup) GetFileCount() *wrapperspb.UInt64Value {
	if x != nil {
		return x.FileCount
	}
	return nil
}

func (x *ConfigFileGroup) GetUserIds() []*wrapperspb.StringValue {
	if x != nil {
		return x.UserIds
	}
	return nil
}

func (x *ConfigFileGroup) GetGroupIds() []*wrapperspb.StringValue {
	if x != nil {
		return x.GroupIds
	}
	return nil
}

func (x *ConfigFileGroup) GetRemoveUserIds() []*wrapperspb.StringValue {
	if x != nil {
		return x.RemoveUserIds
	}
	return nil
}

func (x *ConfigFileGroup) GetRemoveGroupIds() []*wrapperspb.StringValue {
	if x != nil {
		return x.RemoveGroupIds
	}
	return nil
}

func (x *ConfigFileGroup) GetEditable() *wrapperspb.BoolValue {
	if x != nil {
		return x.Editable
	}
	return nil
}

func (x *ConfigFileGroup) GetOwner() *wrapperspb.StringValue {
	if x != nil {
		return x.Owner
	}
	return nil
}

func (x *ConfigFileGroup) GetBusiness() *wrapperspb.StringValue {
	if x != nil {
		return x.Business
	}
	return nil
}

func (x *ConfigFileGroup) GetDepartment() *wrapperspb.StringValue {
	if x != nil {
		return x.Department
	}
	return nil
}

func (x *ConfigFileGroup) GetMetadata() map[string]string {
	if x != nil {
		return x.Metadata
	}
	return nil
}

func (x *ConfigFileGroup) GetDeleteable() *wrapperspb.BoolValue {
	if x != nil {
		return x.Deleteable
	}
	return nil
}

type ConfigFilePersistent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Encoding string `protobuf:"bytes,1,opt,name=encoding,proto3" json:"encoding,omitempty"`
	Path     string `protobuf:"bytes,2,opt,name=path,proto3" json:"path,omitempty"`
	PostCmd  string `protobuf:"bytes,3,opt,name=post_cmd,json=postCmd,proto3" json:"post_cmd,omitempty"`
}

func (x *ConfigFilePersistent) Reset() {
	*x = ConfigFilePersistent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_file_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigFilePersistent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigFilePersistent) ProtoMessage() {}

func (x *ConfigFilePersistent) ProtoReflect() protoreflect.Message {
	mi := &file_config_file_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigFilePersistent.ProtoReflect.Descriptor instead.
func (*ConfigFilePersistent) Descriptor() ([]byte, []int) {
	return file_config_file_proto_rawDescGZIP(), []int{1}
}

func (x *ConfigFilePersistent) GetEncoding() string {
	if x != nil {
		return x.Encoding
	}
	return ""
}

func (x *ConfigFilePersistent) GetPath() string {
	if x != nil {
		return x.Path
	}
	return ""
}

func (x *ConfigFilePersistent) GetPostCmd() string {
	if x != nil {
		return x.PostCmd
	}
	return ""
}

type ConfigFile struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id          *wrapperspb.UInt64Value `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name        *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Namespace   *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Group       *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=group,proto3" json:"group,omitempty"`
	Content     *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
	Format      *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=format,proto3" json:"format,omitempty"`
	Comment     *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=comment,proto3" json:"comment,omitempty"`
	Status      *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=status,proto3" json:"status,omitempty"`
	Tags        []*ConfigFileTag        `protobuf:"bytes,9,rep,name=tags,proto3" json:"tags,omitempty"`
	CreateTime  *wrapperspb.StringValue `protobuf:"bytes,10,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	CreateBy    *wrapperspb.StringValue `protobuf:"bytes,11,opt,name=create_by,json=createBy,proto3" json:"create_by,omitempty"`
	ModifyTime  *wrapperspb.StringValue `protobuf:"bytes,12,opt,name=modify_time,json=modifyTime,proto3" json:"modify_time,omitempty"`
	ModifyBy    *wrapperspb.StringValue `protobuf:"bytes,13,opt,name=modify_by,json=modifyBy,proto3" json:"modify_by,omitempty"`
	ReleaseTime *wrapperspb.StringValue `protobuf:"bytes,14,opt,name=release_time,json=releaseTime,proto3" json:"release_time,omitempty"`
	ReleaseBy   *wrapperspb.StringValue `protobuf:"bytes,15,opt,name=release_by,json=releaseBy,proto3" json:"release_by,omitempty"`
	// 是否为加密配置文件
	Encrypted *wrapperspb.BoolValue `protobuf:"bytes,16,opt,name=encrypted,proto3" json:"encrypted,omitempty"`
	// 加密算法
	EncryptAlgo *wrapperspb.StringValue `protobuf:"bytes,17,opt,name=encrypt_algo,json=encryptAlgo,proto3" json:"encrypt_algo,omitempty"`
	PullClient  ConfigFilePullClient    `protobuf:"varint,18,opt,name=pull_client,json=pullClient,proto3,enum=v1.ConfigFilePullClient" json:"pull_client,omitempty"`
	Persistent  *ConfigFilePersistent   `protobuf:"bytes,19,opt,name=persistent,proto3" json:"persistent,omitempty"`
}

func (x *ConfigFile) Reset() {
	*x = ConfigFile{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_file_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigFile) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigFile) ProtoMessage() {}

func (x *ConfigFile) ProtoReflect() protoreflect.Message {
	mi := &file_config_file_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigFile.ProtoReflect.Descriptor instead.
func (*ConfigFile) Descriptor() ([]byte, []int) {
	return file_config_file_proto_rawDescGZIP(), []int{2}
}

func (x *ConfigFile) GetId() *wrapperspb.UInt64Value {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ConfigFile) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *ConfigFile) GetNamespace() *wrapperspb.StringValue {
	if x != nil {
		return x.Namespace
	}
	return nil
}

func (x *ConfigFile) GetGroup() *wrapperspb.StringValue {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *ConfigFile) GetContent() *wrapperspb.StringValue {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *ConfigFile) GetFormat() *wrapperspb.StringValue {
	if x != nil {
		return x.Format
	}
	return nil
}

func (x *ConfigFile) GetComment() *wrapperspb.StringValue {
	if x != nil {
		return x.Comment
	}
	return nil
}

func (x *ConfigFile) GetStatus() *wrapperspb.StringValue {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ConfigFile) GetTags() []*ConfigFileTag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ConfigFile) GetCreateTime() *wrapperspb.StringValue {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *ConfigFile) GetCreateBy() *wrapperspb.StringValue {
	if x != nil {
		return x.CreateBy
	}
	return nil
}

func (x *ConfigFile) GetModifyTime() *wrapperspb.StringValue {
	if x != nil {
		return x.ModifyTime
	}
	return nil
}

func (x *ConfigFile) GetModifyBy() *wrapperspb.StringValue {
	if x != nil {
		return x.ModifyBy
	}
	return nil
}

func (x *ConfigFile) GetReleaseTime() *wrapperspb.StringValue {
	if x != nil {
		return x.ReleaseTime
	}
	return nil
}

func (x *ConfigFile) GetReleaseBy() *wrapperspb.StringValue {
	if x != nil {
		return x.ReleaseBy
	}
	return nil
}

func (x *ConfigFile) GetEncrypted() *wrapperspb.BoolValue {
	if x != nil {
		return x.Encrypted
	}
	return nil
}

func (x *ConfigFile) GetEncryptAlgo() *wrapperspb.StringValue {
	if x != nil {
		return x.EncryptAlgo
	}
	return nil
}

func (x *ConfigFile) GetPullClient() ConfigFilePullClient {
	if x != nil {
		return x.PullClient
	}
	return ConfigFilePullClient_CLIENT_SDK
}

func (x *ConfigFile) GetPersistent() *ConfigFilePersistent {
	if x != nil {
		return x.Persistent
	}
	return nil
}

type ConfigFileTag struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Key   *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=key,proto3" json:"key,omitempty"`
	Value *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *ConfigFileTag) Reset() {
	*x = ConfigFileTag{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_file_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigFileTag) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigFileTag) ProtoMessage() {}

func (x *ConfigFileTag) ProtoReflect() protoreflect.Message {
	mi := &file_config_file_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigFileTag.ProtoReflect.Descriptor instead.
func (*ConfigFileTag) Descriptor() ([]byte, []int) {
	return file_config_file_proto_rawDescGZIP(), []int{3}
}

func (x *ConfigFileTag) GetKey() *wrapperspb.StringValue {
	if x != nil {
		return x.Key
	}
	return nil
}

func (x *ConfigFileTag) GetValue() *wrapperspb.StringValue {
	if x != nil {
		return x.Value
	}
	return nil
}

type ConfigFileRelease struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         *wrapperspb.UInt64Value `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name       *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Namespace  *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Group      *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=group,proto3" json:"group,omitempty"`
	FileName   *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	Content    *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=content,proto3" json:"content,omitempty"`
	Comment    *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=comment,proto3" json:"comment,omitempty"`
	Md5        *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=md5,proto3" json:"md5,omitempty"`
	Version    *wrapperspb.UInt64Value `protobuf:"bytes,9,opt,name=version,proto3" json:"version,omitempty"`
	CreateTime *wrapperspb.StringValue `protobuf:"bytes,10,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	CreateBy   *wrapperspb.StringValue `protobuf:"bytes,11,opt,name=create_by,json=createBy,proto3" json:"create_by,omitempty"`
	ModifyTime *wrapperspb.StringValue `protobuf:"bytes,12,opt,name=modify_time,json=modifyTime,proto3" json:"modify_time,omitempty"`
	ModifyBy   *wrapperspb.StringValue `protobuf:"bytes,13,opt,name=modify_by,json=modifyBy,proto3" json:"modify_by,omitempty"`
	Tags       []*ConfigFileTag        `protobuf:"bytes,14,rep,name=tags,proto3" json:"tags,omitempty"`
	// 当前生效配置
	Active             *wrapperspb.BoolValue   `protobuf:"bytes,15,opt,name=active,proto3" json:"active,omitempty"`
	Format             *wrapperspb.StringValue `protobuf:"bytes,16,opt,name=format,proto3" json:"format,omitempty"`
	ReleaseDescription *wrapperspb.StringValue `protobuf:"bytes,17,opt,name=release_description,json=releaseDescription,proto3" json:"release_description,omitempty"`
	ReleaseType        *wrapperspb.StringValue `protobuf:"bytes,18,opt,name=release_type,json=releaseType,proto3" json:"release_type,omitempty"`
	// 配置灰度发布时需要匹配的客户端标签信息
	BetaLabels []*model.ClientLabel `protobuf:"bytes,19,rep,name=beta_labels,json=betaLabels,proto3" json:"beta_labels,omitempty"`
	// 配置文件唯一ID
	ConfigFileId *wrapperspb.UInt64Value `protobuf:"bytes,20,opt,name=config_file_id,json=configFileId,proto3" json:"config_file_id,omitempty"`
	PullClient   ConfigFilePullClient    `protobuf:"varint,21,opt,name=pull_client,json=pullClient,proto3,enum=v1.ConfigFilePullClient" json:"pull_client,omitempty"`
	Persistent   *ConfigFilePersistent   `protobuf:"bytes,22,opt,name=persistent,proto3" json:"persistent,omitempty"`
}

func (x *ConfigFileRelease) Reset() {
	*x = ConfigFileRelease{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_file_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigFileRelease) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigFileRelease) ProtoMessage() {}

func (x *ConfigFileRelease) ProtoReflect() protoreflect.Message {
	mi := &file_config_file_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigFileRelease.ProtoReflect.Descriptor instead.
func (*ConfigFileRelease) Descriptor() ([]byte, []int) {
	return file_config_file_proto_rawDescGZIP(), []int{4}
}

func (x *ConfigFileRelease) GetId() *wrapperspb.UInt64Value {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ConfigFileRelease) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *ConfigFileRelease) GetNamespace() *wrapperspb.StringValue {
	if x != nil {
		return x.Namespace
	}
	return nil
}

func (x *ConfigFileRelease) GetGroup() *wrapperspb.StringValue {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *ConfigFileRelease) GetFileName() *wrapperspb.StringValue {
	if x != nil {
		return x.FileName
	}
	return nil
}

func (x *ConfigFileRelease) GetContent() *wrapperspb.StringValue {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *ConfigFileRelease) GetComment() *wrapperspb.StringValue {
	if x != nil {
		return x.Comment
	}
	return nil
}

func (x *ConfigFileRelease) GetMd5() *wrapperspb.StringValue {
	if x != nil {
		return x.Md5
	}
	return nil
}

func (x *ConfigFileRelease) GetVersion() *wrapperspb.UInt64Value {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *ConfigFileRelease) GetCreateTime() *wrapperspb.StringValue {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *ConfigFileRelease) GetCreateBy() *wrapperspb.StringValue {
	if x != nil {
		return x.CreateBy
	}
	return nil
}

func (x *ConfigFileRelease) GetModifyTime() *wrapperspb.StringValue {
	if x != nil {
		return x.ModifyTime
	}
	return nil
}

func (x *ConfigFileRelease) GetModifyBy() *wrapperspb.StringValue {
	if x != nil {
		return x.ModifyBy
	}
	return nil
}

func (x *ConfigFileRelease) GetTags() []*ConfigFileTag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ConfigFileRelease) GetActive() *wrapperspb.BoolValue {
	if x != nil {
		return x.Active
	}
	return nil
}

func (x *ConfigFileRelease) GetFormat() *wrapperspb.StringValue {
	if x != nil {
		return x.Format
	}
	return nil
}

func (x *ConfigFileRelease) GetReleaseDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.ReleaseDescription
	}
	return nil
}

func (x *ConfigFileRelease) GetReleaseType() *wrapperspb.StringValue {
	if x != nil {
		return x.ReleaseType
	}
	return nil
}

func (x *ConfigFileRelease) GetBetaLabels() []*model.ClientLabel {
	if x != nil {
		return x.BetaLabels
	}
	return nil
}

func (x *ConfigFileRelease) GetConfigFileId() *wrapperspb.UInt64Value {
	if x != nil {
		return x.ConfigFileId
	}
	return nil
}

func (x *ConfigFileRelease) GetPullClient() ConfigFilePullClient {
	if x != nil {
		return x.PullClient
	}
	return ConfigFilePullClient_CLIENT_SDK
}

func (x *ConfigFileRelease) GetPersistent() *ConfigFilePersistent {
	if x != nil {
		return x.Persistent
	}
	return nil
}

type ConfigFileReleaseHistory struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         *wrapperspb.UInt64Value `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name       *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Namespace  *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Group      *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=group,proto3" json:"group,omitempty"`
	FileName   *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	Content    *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=content,proto3" json:"content,omitempty"`
	Format     *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=format,proto3" json:"format,omitempty"`
	Comment    *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=comment,proto3" json:"comment,omitempty"`
	Md5        *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=md5,proto3" json:"md5,omitempty"`
	Type       *wrapperspb.StringValue `protobuf:"bytes,10,opt,name=type,proto3" json:"type,omitempty"`
	Status     *wrapperspb.StringValue `protobuf:"bytes,11,opt,name=status,proto3" json:"status,omitempty"`
	Tags       []*ConfigFileTag        `protobuf:"bytes,12,rep,name=tags,proto3" json:"tags,omitempty"`
	CreateTime *wrapperspb.StringValue `protobuf:"bytes,13,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	CreateBy   *wrapperspb.StringValue `protobuf:"bytes,14,opt,name=create_by,json=createBy,proto3" json:"create_by,omitempty"`
	ModifyTime *wrapperspb.StringValue `protobuf:"bytes,15,opt,name=modify_time,json=modifyTime,proto3" json:"modify_time,omitempty"`
	ModifyBy   *wrapperspb.StringValue `protobuf:"bytes,16,opt,name=modify_by,json=modifyBy,proto3" json:"modify_by,omitempty"`
	// 配置发布失败的原因
	Reason             *wrapperspb.StringValue `protobuf:"bytes,17,opt,name=reason,proto3" json:"reason,omitempty"`
	ReleaseDescription *wrapperspb.StringValue `protobuf:"bytes,18,opt,name=release_description,json=releaseDescription,proto3" json:"release_description,omitempty"`
	PullClient         ConfigFilePullClient    `protobuf:"varint,19,opt,name=pull_client,json=pullClient,proto3,enum=v1.ConfigFilePullClient" json:"pull_client,omitempty"`
	Persistent         *ConfigFilePersistent   `protobuf:"bytes,20,opt,name=persistent,proto3" json:"persistent,omitempty"`
}

func (x *ConfigFileReleaseHistory) Reset() {
	*x = ConfigFileReleaseHistory{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_file_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigFileReleaseHistory) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigFileReleaseHistory) ProtoMessage() {}

func (x *ConfigFileReleaseHistory) ProtoReflect() protoreflect.Message {
	mi := &file_config_file_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigFileReleaseHistory.ProtoReflect.Descriptor instead.
func (*ConfigFileReleaseHistory) Descriptor() ([]byte, []int) {
	return file_config_file_proto_rawDescGZIP(), []int{5}
}

func (x *ConfigFileReleaseHistory) GetId() *wrapperspb.UInt64Value {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ConfigFileReleaseHistory) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *ConfigFileReleaseHistory) GetNamespace() *wrapperspb.StringValue {
	if x != nil {
		return x.Namespace
	}
	return nil
}

func (x *ConfigFileReleaseHistory) GetGroup() *wrapperspb.StringValue {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *ConfigFileReleaseHistory) GetFileName() *wrapperspb.StringValue {
	if x != nil {
		return x.FileName
	}
	return nil
}

func (x *ConfigFileReleaseHistory) GetContent() *wrapperspb.StringValue {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *ConfigFileReleaseHistory) GetFormat() *wrapperspb.StringValue {
	if x != nil {
		return x.Format
	}
	return nil
}

func (x *ConfigFileReleaseHistory) GetComment() *wrapperspb.StringValue {
	if x != nil {
		return x.Comment
	}
	return nil
}

func (x *ConfigFileReleaseHistory) GetMd5() *wrapperspb.StringValue {
	if x != nil {
		return x.Md5
	}
	return nil
}

func (x *ConfigFileReleaseHistory) GetType() *wrapperspb.StringValue {
	if x != nil {
		return x.Type
	}
	return nil
}

func (x *ConfigFileReleaseHistory) GetStatus() *wrapperspb.StringValue {
	if x != nil {
		return x.Status
	}
	return nil
}

func (x *ConfigFileReleaseHistory) GetTags() []*ConfigFileTag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ConfigFileReleaseHistory) GetCreateTime() *wrapperspb.StringValue {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *ConfigFileReleaseHistory) GetCreateBy() *wrapperspb.StringValue {
	if x != nil {
		return x.CreateBy
	}
	return nil
}

func (x *ConfigFileReleaseHistory) GetModifyTime() *wrapperspb.StringValue {
	if x != nil {
		return x.ModifyTime
	}
	return nil
}

func (x *ConfigFileReleaseHistory) GetModifyBy() *wrapperspb.StringValue {
	if x != nil {
		return x.ModifyBy
	}
	return nil
}

func (x *ConfigFileReleaseHistory) GetReason() *wrapperspb.StringValue {
	if x != nil {
		return x.Reason
	}
	return nil
}

func (x *ConfigFileReleaseHistory) GetReleaseDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.ReleaseDescription
	}
	return nil
}

func (x *ConfigFileReleaseHistory) GetPullClient() ConfigFilePullClient {
	if x != nil {
		return x.PullClient
	}
	return ConfigFilePullClient_CLIENT_SDK
}

func (x *ConfigFileReleaseHistory) GetPersistent() *ConfigFilePersistent {
	if x != nil {
		return x.Persistent
	}
	return nil
}

type ConfigFileTemplate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Id         *wrapperspb.UInt64Value `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	Name       *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Content    *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=content,proto3" json:"content,omitempty"`
	Format     *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=format,proto3" json:"format,omitempty"`
	Comment    *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=comment,proto3" json:"comment,omitempty"`
	CreateTime *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=create_time,json=createTime,proto3" json:"create_time,omitempty"`
	CreateBy   *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=create_by,json=createBy,proto3" json:"create_by,omitempty"`
	ModifyTime *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=modify_time,json=modifyTime,proto3" json:"modify_time,omitempty"`
	ModifyBy   *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=modify_by,json=modifyBy,proto3" json:"modify_by,omitempty"`
}

func (x *ConfigFileTemplate) Reset() {
	*x = ConfigFileTemplate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_file_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigFileTemplate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigFileTemplate) ProtoMessage() {}

func (x *ConfigFileTemplate) ProtoReflect() protoreflect.Message {
	mi := &file_config_file_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigFileTemplate.ProtoReflect.Descriptor instead.
func (*ConfigFileTemplate) Descriptor() ([]byte, []int) {
	return file_config_file_proto_rawDescGZIP(), []int{6}
}

func (x *ConfigFileTemplate) GetId() *wrapperspb.UInt64Value {
	if x != nil {
		return x.Id
	}
	return nil
}

func (x *ConfigFileTemplate) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *ConfigFileTemplate) GetContent() *wrapperspb.StringValue {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *ConfigFileTemplate) GetFormat() *wrapperspb.StringValue {
	if x != nil {
		return x.Format
	}
	return nil
}

func (x *ConfigFileTemplate) GetComment() *wrapperspb.StringValue {
	if x != nil {
		return x.Comment
	}
	return nil
}

func (x *ConfigFileTemplate) GetCreateTime() *wrapperspb.StringValue {
	if x != nil {
		return x.CreateTime
	}
	return nil
}

func (x *ConfigFileTemplate) GetCreateBy() *wrapperspb.StringValue {
	if x != nil {
		return x.CreateBy
	}
	return nil
}

func (x *ConfigFileTemplate) GetModifyTime() *wrapperspb.StringValue {
	if x != nil {
		return x.ModifyTime
	}
	return nil
}

func (x *ConfigFileTemplate) GetModifyBy() *wrapperspb.StringValue {
	if x != nil {
		return x.ModifyBy
	}
	return nil
}

type ClientConfigFileInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Group     *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=group,proto3" json:"group,omitempty"`
	FileName  *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=file_name,json=fileName,proto3" json:"file_name,omitempty"`
	Content   *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=content,proto3" json:"content,omitempty"`
	Version   *wrapperspb.UInt64Value `protobuf:"bytes,5,opt,name=version,proto3" json:"version,omitempty"`
	Md5       *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=md5,proto3" json:"md5,omitempty"`
	Tags      []*ConfigFileTag        `protobuf:"bytes,7,rep,name=tags,proto3" json:"tags,omitempty"`
	// 是否为加密配置文件
	Encrypted *wrapperspb.BoolValue `protobuf:"bytes,8,opt,name=encrypted,proto3" json:"encrypted,omitempty"`
	// 公钥，用于加密数据密钥
	PublicKey *wrapperspb.StringValue `protobuf:"bytes,9,opt,name=public_key,json=publicKey,proto3" json:"public_key,omitempty"`
	// 配置文件版本名称
	Name *wrapperspb.StringValue `protobuf:"bytes,10,opt,name=name,proto3" json:"name,omitempty"`
	// 配置文件的发布时间
	ReleaseTime *wrapperspb.StringValue `protobuf:"bytes,11,opt,name=release_time,proto3" json:"release_time,omitempty"`
	RequestMode ConfigRequestMode       `protobuf:"varint,12,opt,name=request_mode,json=requestMode,proto3,enum=v1.ConfigRequestMode" json:"request_mode,omitempty"`
	PullClient  ConfigFilePullClient    `protobuf:"varint,13,opt,name=pull_client,json=pullClient,proto3,enum=v1.ConfigFilePullClient" json:"pull_client,omitempty"`
	Persistent  *ConfigFilePersistent   `protobuf:"bytes,14,opt,name=persistent,proto3" json:"persistent,omitempty"`
}

func (x *ClientConfigFileInfo) Reset() {
	*x = ClientConfigFileInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_file_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientConfigFileInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientConfigFileInfo) ProtoMessage() {}

func (x *ClientConfigFileInfo) ProtoReflect() protoreflect.Message {
	mi := &file_config_file_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientConfigFileInfo.ProtoReflect.Descriptor instead.
func (*ClientConfigFileInfo) Descriptor() ([]byte, []int) {
	return file_config_file_proto_rawDescGZIP(), []int{7}
}

func (x *ClientConfigFileInfo) GetNamespace() *wrapperspb.StringValue {
	if x != nil {
		return x.Namespace
	}
	return nil
}

func (x *ClientConfigFileInfo) GetGroup() *wrapperspb.StringValue {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *ClientConfigFileInfo) GetFileName() *wrapperspb.StringValue {
	if x != nil {
		return x.FileName
	}
	return nil
}

func (x *ClientConfigFileInfo) GetContent() *wrapperspb.StringValue {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *ClientConfigFileInfo) GetVersion() *wrapperspb.UInt64Value {
	if x != nil {
		return x.Version
	}
	return nil
}

func (x *ClientConfigFileInfo) GetMd5() *wrapperspb.StringValue {
	if x != nil {
		return x.Md5
	}
	return nil
}

func (x *ClientConfigFileInfo) GetTags() []*ConfigFileTag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ClientConfigFileInfo) GetEncrypted() *wrapperspb.BoolValue {
	if x != nil {
		return x.Encrypted
	}
	return nil
}

func (x *ClientConfigFileInfo) GetPublicKey() *wrapperspb.StringValue {
	if x != nil {
		return x.PublicKey
	}
	return nil
}

func (x *ClientConfigFileInfo) GetName() *wrapperspb.StringValue {
	if x != nil {
		return x.Name
	}
	return nil
}

func (x *ClientConfigFileInfo) GetReleaseTime() *wrapperspb.StringValue {
	if x != nil {
		return x.ReleaseTime
	}
	return nil
}

func (x *ClientConfigFileInfo) GetRequestMode() ConfigRequestMode {
	if x != nil {
		return x.RequestMode
	}
	return ConfigRequestMode_Default
}

func (x *ClientConfigFileInfo) GetPullClient() ConfigFilePullClient {
	if x != nil {
		return x.PullClient
	}
	return ConfigFilePullClient_CLIENT_SDK
}

func (x *ClientConfigFileInfo) GetPersistent() *ConfigFilePersistent {
	if x != nil {
		return x.Persistent
	}
	return nil
}

type ClientWatchConfigFileRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ClientIp    *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=client_ip,json=clientIp,proto3" json:"client_ip,omitempty"`
	ServiceName *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=service_name,json=serviceName,proto3" json:"service_name,omitempty"`
	WatchFiles  []*ClientConfigFileInfo `protobuf:"bytes,3,rep,name=watch_files,json=watchFiles,proto3" json:"watch_files,omitempty"`
	RequestMode ConfigRequestMode       `protobuf:"varint,4,opt,name=request_mode,json=requestMode,proto3,enum=v1.ConfigRequestMode" json:"request_mode,omitempty"`
	PullClient  ConfigFilePullClient    `protobuf:"varint,5,opt,name=pull_client,json=pullClient,proto3,enum=v1.ConfigFilePullClient" json:"pull_client,omitempty"`
	Persistent  *ConfigFilePersistent   `protobuf:"bytes,6,opt,name=persistent,proto3" json:"persistent,omitempty"`
}

func (x *ClientWatchConfigFileRequest) Reset() {
	*x = ClientWatchConfigFileRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_file_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ClientWatchConfigFileRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ClientWatchConfigFileRequest) ProtoMessage() {}

func (x *ClientWatchConfigFileRequest) ProtoReflect() protoreflect.Message {
	mi := &file_config_file_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ClientWatchConfigFileRequest.ProtoReflect.Descriptor instead.
func (*ClientWatchConfigFileRequest) Descriptor() ([]byte, []int) {
	return file_config_file_proto_rawDescGZIP(), []int{8}
}

func (x *ClientWatchConfigFileRequest) GetClientIp() *wrapperspb.StringValue {
	if x != nil {
		return x.ClientIp
	}
	return nil
}

func (x *ClientWatchConfigFileRequest) GetServiceName() *wrapperspb.StringValue {
	if x != nil {
		return x.ServiceName
	}
	return nil
}

func (x *ClientWatchConfigFileRequest) GetWatchFiles() []*ClientConfigFileInfo {
	if x != nil {
		return x.WatchFiles
	}
	return nil
}

func (x *ClientWatchConfigFileRequest) GetRequestMode() ConfigRequestMode {
	if x != nil {
		return x.RequestMode
	}
	return ConfigRequestMode_Default
}

func (x *ClientWatchConfigFileRequest) GetPullClient() ConfigFilePullClient {
	if x != nil {
		return x.PullClient
	}
	return ConfigFilePullClient_CLIENT_SDK
}

func (x *ClientWatchConfigFileRequest) GetPersistent() *ConfigFilePersistent {
	if x != nil {
		return x.Persistent
	}
	return nil
}

type ConfigFileExportRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Namespace *wrapperspb.StringValue   `protobuf:"bytes,1,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Groups    []*wrapperspb.StringValue `protobuf:"bytes,2,rep,name=groups,proto3" json:"groups,omitempty"`
	Names     []*wrapperspb.StringValue `protobuf:"bytes,3,rep,name=names,proto3" json:"names,omitempty"`
	Ids       []*wrapperspb.UInt64Value `protobuf:"bytes,4,rep,name=ids,proto3" json:"ids,omitempty"`
}

func (x *ConfigFileExportRequest) Reset() {
	*x = ConfigFileExportRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_file_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigFileExportRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigFileExportRequest) ProtoMessage() {}

func (x *ConfigFileExportRequest) ProtoReflect() protoreflect.Message {
	mi := &file_config_file_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigFileExportRequest.ProtoReflect.Descriptor instead.
func (*ConfigFileExportRequest) Descriptor() ([]byte, []int) {
	return file_config_file_proto_rawDescGZIP(), []int{9}
}

func (x *ConfigFileExportRequest) GetNamespace() *wrapperspb.StringValue {
	if x != nil {
		return x.Namespace
	}
	return nil
}

func (x *ConfigFileExportRequest) GetGroups() []*wrapperspb.StringValue {
	if x != nil {
		return x.Groups
	}
	return nil
}

func (x *ConfigFileExportRequest) GetNames() []*wrapperspb.StringValue {
	if x != nil {
		return x.Names
	}
	return nil
}

func (x *ConfigFileExportRequest) GetIds() []*wrapperspb.UInt64Value {
	if x != nil {
		return x.Ids
	}
	return nil
}

type ConfigFilePublishInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReleaseName        *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=release_name,proto3" json:"release_name,omitempty"`
	Namespace          *wrapperspb.StringValue `protobuf:"bytes,2,opt,name=namespace,proto3" json:"namespace,omitempty"`
	Group              *wrapperspb.StringValue `protobuf:"bytes,3,opt,name=group,proto3" json:"group,omitempty"`
	FileName           *wrapperspb.StringValue `protobuf:"bytes,4,opt,name=file_name,proto3" json:"file_name,omitempty"`
	Content            *wrapperspb.StringValue `protobuf:"bytes,5,opt,name=content,proto3" json:"content,omitempty"`
	Comment            *wrapperspb.StringValue `protobuf:"bytes,6,opt,name=comment,proto3" json:"comment,omitempty"`
	Format             *wrapperspb.StringValue `protobuf:"bytes,7,opt,name=format,proto3" json:"format,omitempty"`
	ReleaseDescription *wrapperspb.StringValue `protobuf:"bytes,8,opt,name=release_description,proto3" json:"release_description,omitempty"`
	CreateBy           *wrapperspb.StringValue `protobuf:"bytes,11,opt,name=create_by,proto3" json:"create_by,omitempty"`
	ModifyBy           *wrapperspb.StringValue `protobuf:"bytes,13,opt,name=modify_by,proto3" json:"modify_by,omitempty"`
	Tags               []*ConfigFileTag        `protobuf:"bytes,14,rep,name=tags,proto3" json:"tags,omitempty"`
	Md5                *wrapperspb.StringValue `protobuf:"bytes,15,opt,name=md5,proto3" json:"md5,omitempty"`
	// 是否为加密配置文件
	Encrypted *wrapperspb.BoolValue `protobuf:"bytes,16,opt,name=encrypted,proto3" json:"encrypted,omitempty"`
	// 加密算法
	EncryptAlgo *wrapperspb.StringValue `protobuf:"bytes,17,opt,name=encrypt_algo,json=encryptAlgo,proto3" json:"encrypt_algo,omitempty"`
	PullClient  ConfigFilePullClient    `protobuf:"varint,18,opt,name=pull_client,json=pullClient,proto3,enum=v1.ConfigFilePullClient" json:"pull_client,omitempty"`
	Persistent  *ConfigFilePersistent   `protobuf:"bytes,19,opt,name=persistent,proto3" json:"persistent,omitempty"`
}

func (x *ConfigFilePublishInfo) Reset() {
	*x = ConfigFilePublishInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_file_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigFilePublishInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigFilePublishInfo) ProtoMessage() {}

func (x *ConfigFilePublishInfo) ProtoReflect() protoreflect.Message {
	mi := &file_config_file_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigFilePublishInfo.ProtoReflect.Descriptor instead.
func (*ConfigFilePublishInfo) Descriptor() ([]byte, []int) {
	return file_config_file_proto_rawDescGZIP(), []int{10}
}

func (x *ConfigFilePublishInfo) GetReleaseName() *wrapperspb.StringValue {
	if x != nil {
		return x.ReleaseName
	}
	return nil
}

func (x *ConfigFilePublishInfo) GetNamespace() *wrapperspb.StringValue {
	if x != nil {
		return x.Namespace
	}
	return nil
}

func (x *ConfigFilePublishInfo) GetGroup() *wrapperspb.StringValue {
	if x != nil {
		return x.Group
	}
	return nil
}

func (x *ConfigFilePublishInfo) GetFileName() *wrapperspb.StringValue {
	if x != nil {
		return x.FileName
	}
	return nil
}

func (x *ConfigFilePublishInfo) GetContent() *wrapperspb.StringValue {
	if x != nil {
		return x.Content
	}
	return nil
}

func (x *ConfigFilePublishInfo) GetComment() *wrapperspb.StringValue {
	if x != nil {
		return x.Comment
	}
	return nil
}

func (x *ConfigFilePublishInfo) GetFormat() *wrapperspb.StringValue {
	if x != nil {
		return x.Format
	}
	return nil
}

func (x *ConfigFilePublishInfo) GetReleaseDescription() *wrapperspb.StringValue {
	if x != nil {
		return x.ReleaseDescription
	}
	return nil
}

func (x *ConfigFilePublishInfo) GetCreateBy() *wrapperspb.StringValue {
	if x != nil {
		return x.CreateBy
	}
	return nil
}

func (x *ConfigFilePublishInfo) GetModifyBy() *wrapperspb.StringValue {
	if x != nil {
		return x.ModifyBy
	}
	return nil
}

func (x *ConfigFilePublishInfo) GetTags() []*ConfigFileTag {
	if x != nil {
		return x.Tags
	}
	return nil
}

func (x *ConfigFilePublishInfo) GetMd5() *wrapperspb.StringValue {
	if x != nil {
		return x.Md5
	}
	return nil
}

func (x *ConfigFilePublishInfo) GetEncrypted() *wrapperspb.BoolValue {
	if x != nil {
		return x.Encrypted
	}
	return nil
}

func (x *ConfigFilePublishInfo) GetEncryptAlgo() *wrapperspb.StringValue {
	if x != nil {
		return x.EncryptAlgo
	}
	return nil
}

func (x *ConfigFilePublishInfo) GetPullClient() ConfigFilePullClient {
	if x != nil {
		return x.PullClient
	}
	return ConfigFilePullClient_CLIENT_SDK
}

func (x *ConfigFilePublishInfo) GetPersistent() *ConfigFilePersistent {
	if x != nil {
		return x.Persistent
	}
	return nil
}

type ConfigFileGroupRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Revision        *wrapperspb.StringValue `protobuf:"bytes,1,opt,name=revision,proto3" json:"revision,omitempty"`
	ConfigFileGroup *ConfigFileGroup        `protobuf:"bytes,2,opt,name=config_file_group,json=configFileGroup,proto3" json:"config_file_group,omitempty"`
	// 配置标签
	ClientLabels map[string]string     `protobuf:"bytes,12,rep,name=client_labels,proto3" json:"client_labels,omitempty" protobuf_key:"bytes,1,opt,name=key,proto3" protobuf_val:"bytes,2,opt,name=value,proto3"`
	RequestMode  ConfigRequestMode     `protobuf:"varint,13,opt,name=request_mode,json=requestMode,proto3,enum=v1.ConfigRequestMode" json:"request_mode,omitempty"`
	PullClient   ConfigFilePullClient  `protobuf:"varint,14,opt,name=pull_client,json=pullClient,proto3,enum=v1.ConfigFilePullClient" json:"pull_client,omitempty"`
	Persistent   *ConfigFilePersistent `protobuf:"bytes,15,opt,name=persistent,proto3" json:"persistent,omitempty"`
}

func (x *ConfigFileGroupRequest) Reset() {
	*x = ConfigFileGroupRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_file_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigFileGroupRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigFileGroupRequest) ProtoMessage() {}

func (x *ConfigFileGroupRequest) ProtoReflect() protoreflect.Message {
	mi := &file_config_file_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigFileGroupRequest.ProtoReflect.Descriptor instead.
func (*ConfigFileGroupRequest) Descriptor() ([]byte, []int) {
	return file_config_file_proto_rawDescGZIP(), []int{11}
}

func (x *ConfigFileGroupRequest) GetRevision() *wrapperspb.StringValue {
	if x != nil {
		return x.Revision
	}
	return nil
}

func (x *ConfigFileGroupRequest) GetConfigFileGroup() *ConfigFileGroup {
	if x != nil {
		return x.ConfigFileGroup
	}
	return nil
}

func (x *ConfigFileGroupRequest) GetClientLabels() map[string]string {
	if x != nil {
		return x.ClientLabels
	}
	return nil
}

func (x *ConfigFileGroupRequest) GetRequestMode() ConfigRequestMode {
	if x != nil {
		return x.RequestMode
	}
	return ConfigRequestMode_Default
}

func (x *ConfigFileGroupRequest) GetPullClient() ConfigFilePullClient {
	if x != nil {
		return x.PullClient
	}
	return ConfigFilePullClient_CLIENT_SDK
}

func (x *ConfigFileGroupRequest) GetPersistent() *ConfigFilePersistent {
	if x != nil {
		return x.Persistent
	}
	return nil
}

type ConfigDiscoverRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Type       ConfigDiscoverRequest_ConfigDiscoverRequestType `protobuf:"varint,1,opt,name=type,proto3,enum=v1.ConfigDiscoverRequest_ConfigDiscoverRequestType" json:"type,omitempty"`
	ConfigFile *ClientConfigFileInfo                           `protobuf:"bytes,2,opt,name=config_file,proto3" json:"config_file,omitempty"`
	Revision   string                                          `protobuf:"bytes,3,opt,name=revision,proto3" json:"revision,omitempty"`
}

func (x *ConfigDiscoverRequest) Reset() {
	*x = ConfigDiscoverRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_file_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigDiscoverRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigDiscoverRequest) ProtoMessage() {}

func (x *ConfigDiscoverRequest) ProtoReflect() protoreflect.Message {
	mi := &file_config_file_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigDiscoverRequest.ProtoReflect.Descriptor instead.
func (*ConfigDiscoverRequest) Descriptor() ([]byte, []int) {
	return file_config_file_proto_rawDescGZIP(), []int{12}
}

func (x *ConfigDiscoverRequest) GetType() ConfigDiscoverRequest_ConfigDiscoverRequestType {
	if x != nil {
		return x.Type
	}
	return ConfigDiscoverRequest_UNKNOWN
}

func (x *ConfigDiscoverRequest) GetConfigFile() *ClientConfigFileInfo {
	if x != nil {
		return x.ConfigFile
	}
	return nil
}

func (x *ConfigDiscoverRequest) GetRevision() string {
	if x != nil {
		return x.Revision
	}
	return ""
}

type ConfigDiscoverResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code             uint32                                            `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Info             string                                            `protobuf:"bytes,2,opt,name=info,proto3" json:"info,omitempty"`
	Revision         string                                            `protobuf:"bytes,3,opt,name=revision,proto3" json:"revision,omitempty"`
	Type             ConfigDiscoverResponse_ConfigDiscoverResponseType `protobuf:"varint,4,opt,name=type,proto3,enum=v1.ConfigDiscoverResponse_ConfigDiscoverResponseType" json:"type,omitempty"`
	ConfigFile       *ClientConfigFileInfo                             `protobuf:"bytes,5,opt,name=config_file,proto3" json:"config_file,omitempty"`
	ConfigFileNames  []*ClientConfigFileInfo                           `protobuf:"bytes,6,rep,name=config_file_names,proto3" json:"config_file_names,omitempty"`
	ConfigFileGroups []*ConfigFileGroup                                `protobuf:"bytes,7,rep,name=config_file_groups,proto3" json:"config_file_groups,omitempty"`
}

func (x *ConfigDiscoverResponse) Reset() {
	*x = ConfigDiscoverResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_config_file_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ConfigDiscoverResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ConfigDiscoverResponse) ProtoMessage() {}

func (x *ConfigDiscoverResponse) ProtoReflect() protoreflect.Message {
	mi := &file_config_file_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ConfigDiscoverResponse.ProtoReflect.Descriptor instead.
func (*ConfigDiscoverResponse) Descriptor() ([]byte, []int) {
	return file_config_file_proto_rawDescGZIP(), []int{13}
}

func (x *ConfigDiscoverResponse) GetCode() uint32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *ConfigDiscoverResponse) GetInfo() string {
	if x != nil {
		return x.Info
	}
	return ""
}

func (x *ConfigDiscoverResponse) GetRevision() string {
	if x != nil {
		return x.Revision
	}
	return ""
}

func (x *ConfigDiscoverResponse) GetType() ConfigDiscoverResponse_ConfigDiscoverResponseType {
	if x != nil {
		return x.Type
	}
	return ConfigDiscoverResponse_UNKNOWN
}

func (x *ConfigDiscoverResponse) GetConfigFile() *ClientConfigFileInfo {
	if x != nil {
		return x.ConfigFile
	}
	return nil
}

func (x *ConfigDiscoverResponse) GetConfigFileNames() []*ClientConfigFileInfo {
	if x != nil {
		return x.ConfigFileNames
	}
	return nil
}

func (x *ConfigDiscoverResponse) GetConfigFileGroups() []*ConfigFileGroup {
	if x != nil {
		return x.ConfigFileGroups
	}
	return nil
}

var File_config_file_proto protoreflect.FileDescriptor

var file_config_file_proto_rawDesc = []byte{
	0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x12, 0x02, 0x76, 0x31, 0x1a, 0x1e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x77, 0x72, 0x61, 0x70, 0x70, 0x65, 0x72,
	0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x0b, 0x6d, 0x6f, 0x64, 0x65, 0x6c, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x22, 0xb9, 0x09, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46,
	0x69, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x2c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73,
	0x70, 0x61, 0x63, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x0b,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x09, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x63, 0x72,
	0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x3d, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f,
	0x62, 0x79, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x42, 0x79,
	0x12, 0x3a, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x08,
	0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x75, 0x73,
	0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x12, 0x3a, 0x0a, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f,
	0x69, 0x64, 0x73, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69,
	0x64, 0x73, 0x12, 0x46, 0x0a, 0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x75, 0x73, 0x65,
	0x72, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0d, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x72, 0x65, 0x6d, 0x6f, 0x76,
	0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x73, 0x12, 0x48, 0x0a, 0x10, 0x72, 0x65,
	0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x5f, 0x69, 0x64, 0x73, 0x18, 0x0e,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x10, 0x72, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x5f, 0x69, 0x64, 0x73, 0x12, 0x36, 0x0a, 0x08, 0x65, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x08, 0x65, 0x64, 0x69, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x12, 0x32, 0x0a, 0x05,
	0x6f, 0x77, 0x6e, 0x65, 0x72, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6f, 0x77, 0x6e, 0x65, 0x72,
	0x12, 0x38, 0x0a, 0x08, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x08, 0x62, 0x75, 0x73, 0x69, 0x6e, 0x65, 0x73, 0x73, 0x12, 0x3c, 0x0a, 0x0a, 0x64, 0x65,
	0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x64, 0x65,
	0x70, 0x61, 0x72, 0x74, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3d, 0x0a, 0x08, 0x6d, 0x65, 0x74, 0x61,
	0x64, 0x61, 0x74, 0x61, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x2e,
	0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x08, 0x6d,
	0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x12, 0x3a, 0x0a, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74,
	0x65, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x64, 0x65, 0x6c, 0x65, 0x74, 0x65, 0x61,
	0x62, 0x6c, 0x65, 0x1a, 0x3b, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x61, 0x64, 0x61, 0x74, 0x61, 0x45,
	0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x3a, 0x02, 0x38, 0x01,
	0x22, 0x61, 0x0a, 0x14, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x65,
	0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6e, 0x63, 0x6f,
	0x64, 0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x65, 0x6e, 0x63, 0x6f,
	0x64, 0x69, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x70, 0x61, 0x74, 0x68, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x04, 0x70, 0x61, 0x74, 0x68, 0x12, 0x19, 0x0a, 0x08, 0x70, 0x6f, 0x73, 0x74,
	0x5f, 0x63, 0x6d, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x70, 0x6f, 0x73, 0x74,
	0x43, 0x6d, 0x64, 0x22, 0xc1, 0x08, 0x0a, 0x0a, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69,
	0x6c, 0x65, 0x12, 0x2c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x32,
	0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x36, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x06, 0x66, 0x6f,
	0x72, 0x6d, 0x61, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74,
	0x12, 0x36, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25,
	0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x61, 0x67, 0x52,
	0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x3d, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x62,
	0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12,
	0x3d, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x39,
	0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x62, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x42, 0x79, 0x12, 0x3f, 0x0a, 0x0c, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3b, 0x0a, 0x0a, 0x72, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x72, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x42, 0x79, 0x12, 0x38, 0x0a, 0x09, 0x65, 0x6e, 0x63, 0x72, 0x79,
	0x70, 0x74, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65,
	0x64, 0x12, 0x3f, 0x0a, 0x0c, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x5f, 0x61, 0x6c, 0x67,
	0x6f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x41, 0x6c,
	0x67, 0x6f, 0x12, 0x39, 0x0a, 0x0b, 0x70, 0x75, 0x6c, 0x6c, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x75, 0x6c, 0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x52, 0x0a, 0x70, 0x75, 0x6c, 0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a,
	0x0a, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x18, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x6c,
	0x65, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x70, 0x65, 0x72,
	0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x73, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x61, 0x67, 0x12, 0x2e, 0x0a, 0x03, 0x6b, 0x65, 0x79, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x32, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0xf6, 0x09, 0x0a,
	0x11, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x12, 0x2c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x32,
	0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x39, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a,
	0x03, 0x6d, 0x64, 0x35, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x6d, 0x64, 0x35, 0x12, 0x36, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x3d, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f,
	0x74, 0x69, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x62,
	0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12,
	0x3d, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x39,
	0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x62, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x42, 0x79, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x61, 0x67,
	0x73, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x61, 0x67, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73,
	0x12, 0x32, 0x0a, 0x06, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x61, 0x63,
	0x74, 0x69, 0x76, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x10,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x4d, 0x0a, 0x13, 0x72, 0x65,
	0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x44, 0x65,
	0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3f, 0x0a, 0x0c, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x5f, 0x74, 0x79, 0x70, 0x65, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x30, 0x0a, 0x0b, 0x62, 0x65,
	0x74, 0x61, 0x5f, 0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x18, 0x13, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x0f, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4c, 0x61, 0x62, 0x65, 0x6c,
	0x52, 0x0a, 0x62, 0x65, 0x74, 0x61, 0x4c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x42, 0x0a, 0x0e,
	0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x69, 0x64, 0x18, 0x14,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x64,
	0x12, 0x39, 0x0a, 0x0b, 0x70, 0x75, 0x6c, 0x6c, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x75, 0x6c, 0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52,
	0x0a, 0x70, 0x75, 0x6c, 0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x0a, 0x70,
	0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x50,
	0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x73, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x74, 0x22, 0xf8, 0x08, 0x0a, 0x18, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x46, 0x69, 0x6c, 0x65, 0x52, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x48, 0x69, 0x73, 0x74, 0x6f,
	0x72, 0x79, 0x12, 0x2c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x69, 0x64,
	0x12, 0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x6e, 0x61,
	0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x32,
	0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x67, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x39, 0x0a, 0x09, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x08, 0x66, 0x69, 0x6c, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a,
	0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x63, 0x6f,
	0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x36, 0x0a, 0x07, 0x63,
	0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d,
	0x65, 0x6e, 0x74, 0x12, 0x2e, 0x0a, 0x03, 0x6d, 0x64, 0x35, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03,
	0x6d, 0x64, 0x35, 0x12, 0x30, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x06, 0x73, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x25, 0x0a, 0x04, 0x74,
	0x61, 0x67, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x54, 0x61, 0x67, 0x52, 0x04, 0x74, 0x61,
	0x67, 0x73, 0x12, 0x3d, 0x0a, 0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d,
	0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x12, 0x39, 0x0a, 0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x08, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x3d, 0x0a, 0x0b,
	0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0a, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x09, 0x6d,
	0x6f, 0x64, 0x69, 0x66, 0x79, 0x5f, 0x62, 0x79, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6d, 0x6f,
	0x64, 0x69, 0x66, 0x79, 0x42, 0x79, 0x12, 0x34, 0x0a, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x72, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x4d, 0x0a, 0x13,
	0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74,
	0x69, 0x6f, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x44, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x39, 0x0a, 0x0b, 0x70,
	0x75, 0x6c, 0x6c, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x18, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x6c, 0x65,
	0x50, 0x75, 0x6c, 0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x70, 0x75, 0x6c, 0x6c,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x74, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73,
	0x74, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74,
	0x22, 0x8e, 0x04, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x54,
	0x65, 0x6d, 0x70, 0x6c, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x02, 0x69, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x02, 0x69, 0x64, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x34, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x66,
	0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x36, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x3d, 0x0a,
	0x0b, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0a, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x63,
	0x72, 0x65, 0x61, 0x74, 0x65, 0x42, 0x79, 0x12, 0x3d, 0x0a, 0x0b, 0x6d, 0x6f, 0x64, 0x69, 0x66,
	0x79, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x79, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x09, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79,
	0x5f, 0x62, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x6d, 0x6f, 0x64, 0x69, 0x66, 0x79, 0x42,
	0x79, 0x22, 0xa2, 0x06, 0x0a, 0x14, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x3a, 0x0a, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x39, 0x0a, 0x09, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e,
	0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x66, 0x69, 0x6c,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12, 0x36, 0x0a,
	0x07, 0x76, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x55, 0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x76, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x03, 0x6d, 0x64, 0x35, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x03, 0x6d, 0x64, 0x35, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x07, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46,
	0x69, 0x6c, 0x65, 0x54, 0x61, 0x67, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x38, 0x0a, 0x09,
	0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x65, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x12, 0x3b, 0x0a, 0x0a, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x5f, 0x6b, 0x65, 0x79, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x70, 0x75, 0x62, 0x6c, 0x69, 0x63,
	0x4b, 0x65, 0x79, 0x12, 0x30, 0x0a, 0x04, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x04, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x40, 0x0a, 0x0c, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65,
	0x5f, 0x74, 0x69, 0x6d, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f,
	0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74,
	0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x72, 0x65, 0x6c, 0x65, 0x61,
	0x73, 0x65, 0x5f, 0x74, 0x69, 0x6d, 0x65, 0x12, 0x38, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65,
	0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x39, 0x0a, 0x0b, 0x70, 0x75, 0x6c, 0x6c, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x75, 0x6c, 0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x52, 0x0a, 0x70, 0x75, 0x6c, 0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x0a,
	0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x18, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x6c, 0x65,
	0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x73,
	0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x22, 0x84, 0x03, 0x0a, 0x1c, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x57, 0x61, 0x74, 0x63, 0x68, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x6c, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x39, 0x0a, 0x09, 0x63, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x5f, 0x69, 0x70, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74,
	0x49, 0x70, 0x12, 0x3f, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x5f, 0x6e, 0x61,
	0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e,
	0x61, 0x6d, 0x65, 0x12, 0x39, 0x0a, 0x0b, 0x77, 0x61, 0x74, 0x63, 0x68, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e,
	0x66, 0x6f, 0x52, 0x0a, 0x77, 0x61, 0x74, 0x63, 0x68, 0x46, 0x69, 0x6c, 0x65, 0x73, 0x12, 0x38,
	0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0b, 0x72, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x39, 0x0a, 0x0b, 0x70, 0x75, 0x6c, 0x6c,
	0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e,
	0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x75, 0x6c,
	0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x70, 0x75, 0x6c, 0x6c, 0x43, 0x6c, 0x69,
	0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e,
	0x74, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x22, 0xef, 0x01,
	0x0a, 0x17, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x45, 0x78, 0x70, 0x6f,
	0x72, 0x74, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x3a, 0x0a, 0x09, 0x6e, 0x61, 0x6d,
	0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x6e, 0x61, 0x6d, 0x65,
	0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x34, 0x0a, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18,
	0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x06, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x12, 0x32, 0x0a, 0x05, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12,
	0x2e, 0x0a, 0x03, 0x69, 0x64, 0x73, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55,
	0x49, 0x6e, 0x74, 0x36, 0x34, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x69, 0x64, 0x73, 0x22,
	0xba, 0x07, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x75,
	0x62, 0x6c, 0x69, 0x73, 0x68, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x40, 0x0a, 0x0c, 0x72, 0x65, 0x6c,
	0x65, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x72,
	0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x09, 0x6e,
	0x61, 0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x6e, 0x61,
	0x6d, 0x65, 0x73, 0x70, 0x61, 0x63, 0x65, 0x12, 0x32, 0x0a, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x05, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x12, 0x3a, 0x0a, 0x09, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c,
	0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x66, 0x69,
	0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x12, 0x36, 0x0a, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e,
	0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x63, 0x6f, 0x6e, 0x74, 0x65, 0x6e, 0x74, 0x12,
	0x36, 0x0a, 0x07, 0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07,
	0x63, 0x6f, 0x6d, 0x6d, 0x65, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61,
	0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x66, 0x6f, 0x72, 0x6d, 0x61, 0x74, 0x12, 0x4e, 0x0a,
	0x13, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73, 0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70,
	0x74, 0x69, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72,
	0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x13, 0x72, 0x65, 0x6c, 0x65, 0x61, 0x73,
	0x65, 0x5f, 0x64, 0x65, 0x73, 0x63, 0x72, 0x69, 0x70, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x3a, 0x0a,
	0x09, 0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09,
	0x63, 0x72, 0x65, 0x61, 0x74, 0x65, 0x5f, 0x62, 0x79, 0x12, 0x3a, 0x0a, 0x09, 0x6d, 0x6f, 0x64,
	0x69, 0x66, 0x79, 0x5f, 0x62, 0x79, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x6d, 0x6f, 0x64, 0x69,
	0x66, 0x79, 0x5f, 0x62, 0x79, 0x12, 0x25, 0x0a, 0x04, 0x74, 0x61, 0x67, 0x73, 0x18, 0x0e, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x11, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46,
	0x69, 0x6c, 0x65, 0x54, 0x61, 0x67, 0x52, 0x04, 0x74, 0x61, 0x67, 0x73, 0x12, 0x2e, 0x0a, 0x03,
	0x6d, 0x64, 0x35, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x03, 0x6d, 0x64, 0x35, 0x12, 0x38, 0x0a, 0x09,
	0x65, 0x6e, 0x63, 0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x18, 0x10, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1a, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x65, 0x6e, 0x63,
	0x72, 0x79, 0x70, 0x74, 0x65, 0x64, 0x12, 0x3f, 0x0a, 0x0c, 0x65, 0x6e, 0x63, 0x72, 0x79, 0x70,
	0x74, 0x5f, 0x61, 0x6c, 0x67, 0x6f, 0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67,
	0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x74, 0x72, 0x69, 0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x65, 0x6e, 0x63, 0x72,
	0x79, 0x70, 0x74, 0x41, 0x6c, 0x67, 0x6f, 0x12, 0x39, 0x0a, 0x0b, 0x70, 0x75, 0x6c, 0x6c, 0x5f,
	0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x75, 0x6c, 0x6c,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x70, 0x75, 0x6c, 0x6c, 0x43, 0x6c, 0x69, 0x65,
	0x6e, 0x74, 0x12, 0x38, 0x0a, 0x0a, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74,
	0x52, 0x0a, 0x70, 0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x22, 0xd7, 0x03, 0x0a,
	0x16, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x38, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1c, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x74, 0x72, 0x69,
	0x6e, 0x67, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x12, 0x3f, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75,
	0x70, 0x52, 0x0f, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x12, 0x52, 0x0a, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f, 0x6c, 0x61, 0x62,
	0x65, 0x6c, 0x73, 0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c, 0x2e, 0x76, 0x31, 0x2e, 0x43,
	0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4c, 0x61, 0x62, 0x65,
	0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x52, 0x0d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x5f,
	0x6c, 0x61, 0x62, 0x65, 0x6c, 0x73, 0x12, 0x38, 0x0a, 0x0c, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73,
	0x74, 0x5f, 0x6d, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d,
	0x6f, 0x64, 0x65, 0x52, 0x0b, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x39, 0x0a, 0x0b, 0x70, 0x75, 0x6c, 0x6c, 0x5f, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x18,
	0x0e, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x18, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x75, 0x6c, 0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x52,
	0x0a, 0x70, 0x75, 0x6c, 0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x12, 0x38, 0x0a, 0x0a, 0x70,
	0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x18, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x50,
	0x65, 0x72, 0x73, 0x69, 0x73, 0x74, 0x65, 0x6e, 0x74, 0x52, 0x0a, 0x70, 0x65, 0x72, 0x73, 0x69,
	0x73, 0x74, 0x65, 0x6e, 0x74, 0x1a, 0x3f, 0x0a, 0x11, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x4c,
	0x61, 0x62, 0x65, 0x6c, 0x73, 0x45, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x10, 0x0a, 0x03, 0x6b, 0x65,
	0x79, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6b, 0x65, 0x79, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x3a, 0x02, 0x38, 0x01, 0x22, 0xa2, 0x02, 0x0a, 0x15, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x47, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x33,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76,
	0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x52, 0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x0b, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18,
	0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x46, 0x69, 0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x5f, 0x66, 0x69, 0x6c, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f,
	0x6e, 0x22, 0x68, 0x0a, 0x19, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b,
	0x0a, 0x07, 0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x43,
	0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11,
	0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x4e, 0x61, 0x6d, 0x65,
	0x73, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x46, 0x49,
	0x4c, 0x45, 0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x53, 0x10, 0x03, 0x22, 0xdb, 0x03, 0x0a, 0x16,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x69, 0x6e,
	0x66, 0x6f, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x12, 0x1a,
	0x0a, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x08, 0x72, 0x65, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x49, 0x0a, 0x04, 0x74, 0x79,
	0x70, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x35, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f,
	0x6e, 0x66, 0x69, 0x67, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x69, 0x73, 0x63, 0x6f,
	0x76, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x3a, 0x0a, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f,
	0x66, 0x69, 0x6c, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76, 0x31, 0x2e,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x6c, 0x65,
	0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0b, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x66, 0x69, 0x6c,
	0x65, 0x12, 0x46, 0x0a, 0x11, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x65,
	0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x18, 0x2e, 0x76,
	0x31, 0x2e, 0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69,
	0x6c, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x11, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x5f, 0x66,
	0x69, 0x6c, 0x65, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x73, 0x12, 0x43, 0x0a, 0x12, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x13, 0x2e, 0x76, 0x31, 0x2e, 0x43, 0x6f, 0x6e, 0x66, 0x69,
	0x67, 0x46, 0x69, 0x6c, 0x65, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x52, 0x12, 0x63, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x5f, 0x66, 0x69, 0x6c, 0x65, 0x5f, 0x67, 0x72, 0x6f, 0x75, 0x70, 0x73, 0x22, 0x69,
	0x0a, 0x1a, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x44, 0x69, 0x73, 0x63, 0x6f, 0x76, 0x65, 0x72,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07,
	0x55, 0x4e, 0x4b, 0x4e, 0x4f, 0x57, 0x4e, 0x10, 0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x43, 0x4f, 0x4e,
	0x46, 0x49, 0x47, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x4f,
	0x4e, 0x46, 0x49, 0x47, 0x5f, 0x46, 0x49, 0x4c, 0x45, 0x5f, 0x4e, 0x61, 0x6d, 0x65, 0x73, 0x10,
	0x02, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x4f, 0x4e, 0x46, 0x49, 0x47, 0x5f, 0x46, 0x49, 0x4c, 0x45,
	0x5f, 0x47, 0x52, 0x4f, 0x55, 0x50, 0x53, 0x10, 0x03, 0x2a, 0x48, 0x0a, 0x14, 0x43, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x46, 0x69, 0x6c, 0x65, 0x50, 0x75, 0x6c, 0x6c, 0x43, 0x6c, 0x69, 0x65, 0x6e,
	0x74, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x44, 0x4b, 0x10,
	0x00, 0x12, 0x10, 0x0a, 0x0c, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x47, 0x45, 0x4e,
	0x54, 0x10, 0x01, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x41, 0x4c,
	0x4c, 0x10, 0x02, 0x2a, 0x34, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x44, 0x4b, 0x10, 0x01, 0x12, 0x09,
	0x0a, 0x05, 0x41, 0x67, 0x65, 0x6e, 0x74, 0x10, 0x02, 0x42, 0x8e, 0x01, 0x0a, 0x36, 0x63, 0x6f,
	0x6d, 0x2e, 0x74, 0x65, 0x6e, 0x63, 0x65, 0x6e, 0x74, 0x2e, 0x70, 0x6f, 0x6c, 0x61, 0x72, 0x69,
	0x73, 0x2e, 0x73, 0x70, 0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x76, 0x31, 0x2e, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x2e, 0x6d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x42, 0x0f, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x46, 0x69, 0x6c, 0x65,
	0x50, 0x72, 0x6f, 0x74, 0x6f, 0x5a, 0x43, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f,
	0x6d, 0x2f, 0x70, 0x6f, 0x6c, 0x61, 0x72, 0x69, 0x73, 0x6d, 0x65, 0x73, 0x68, 0x2f, 0x73, 0x70,
	0x65, 0x63, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x2f, 0x73, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x2f, 0x67, 0x6f, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x76, 0x31, 0x2f, 0x63, 0x6f, 0x6e,
	0x66, 0x69, 0x67, 0x5f, 0x6d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_config_file_proto_rawDescOnce sync.Once
	file_config_file_proto_rawDescData = file_config_file_proto_rawDesc
)

func file_config_file_proto_rawDescGZIP() []byte {
	file_config_file_proto_rawDescOnce.Do(func() {
		file_config_file_proto_rawDescData = protoimpl.X.CompressGZIP(file_config_file_proto_rawDescData)
	})
	return file_config_file_proto_rawDescData
}

var file_config_file_proto_enumTypes = make([]protoimpl.EnumInfo, 4)
var file_config_file_proto_msgTypes = make([]protoimpl.MessageInfo, 16)
var file_config_file_proto_goTypes = []interface{}{
	(ConfigFilePullClient)(0),                              // 0: v1.ConfigFilePullClient
	(ConfigRequestMode)(0),                                 // 1: v1.ConfigRequestMode
	(ConfigDiscoverRequest_ConfigDiscoverRequestType)(0),   // 2: v1.ConfigDiscoverRequest.ConfigDiscoverRequestType
	(ConfigDiscoverResponse_ConfigDiscoverResponseType)(0), // 3: v1.ConfigDiscoverResponse.ConfigDiscoverResponseType
	(*ConfigFileGroup)(nil),                                // 4: v1.ConfigFileGroup
	(*ConfigFilePersistent)(nil),                           // 5: v1.ConfigFilePersistent
	(*ConfigFile)(nil),                                     // 6: v1.ConfigFile
	(*ConfigFileTag)(nil),                                  // 7: v1.ConfigFileTag
	(*ConfigFileRelease)(nil),                              // 8: v1.ConfigFileRelease
	(*ConfigFileReleaseHistory)(nil),                       // 9: v1.ConfigFileReleaseHistory
	(*ConfigFileTemplate)(nil),                             // 10: v1.ConfigFileTemplate
	(*ClientConfigFileInfo)(nil),                           // 11: v1.ClientConfigFileInfo
	(*ClientWatchConfigFileRequest)(nil),                   // 12: v1.ClientWatchConfigFileRequest
	(*ConfigFileExportRequest)(nil),                        // 13: v1.ConfigFileExportRequest
	(*ConfigFilePublishInfo)(nil),                          // 14: v1.ConfigFilePublishInfo
	(*ConfigFileGroupRequest)(nil),                         // 15: v1.ConfigFileGroupRequest
	(*ConfigDiscoverRequest)(nil),                          // 16: v1.ConfigDiscoverRequest
	(*ConfigDiscoverResponse)(nil),                         // 17: v1.ConfigDiscoverResponse
	nil,                                                    // 18: v1.ConfigFileGroup.MetadataEntry
	nil,                                                    // 19: v1.ConfigFileGroupRequest.ClientLabelsEntry
	(*wrapperspb.UInt64Value)(nil),                         // 20: google.protobuf.UInt64Value
	(*wrapperspb.StringValue)(nil),                         // 21: google.protobuf.StringValue
	(*wrapperspb.BoolValue)(nil),                           // 22: google.protobuf.BoolValue
	(*model.ClientLabel)(nil),                              // 23: v1.ClientLabel
}
var file_config_file_proto_depIdxs = []int32{
	20,  // 0: v1.ConfigFileGroup.id:type_name -> google.protobuf.UInt64Value
	21,  // 1: v1.ConfigFileGroup.name:type_name -> google.protobuf.StringValue
	21,  // 2: v1.ConfigFileGroup.namespace:type_name -> google.protobuf.StringValue
	21,  // 3: v1.ConfigFileGroup.comment:type_name -> google.protobuf.StringValue
	21,  // 4: v1.ConfigFileGroup.create_time:type_name -> google.protobuf.StringValue
	21,  // 5: v1.ConfigFileGroup.create_by:type_name -> google.protobuf.StringValue
	21,  // 6: v1.ConfigFileGroup.modify_time:type_name -> google.protobuf.StringValue
	21,  // 7: v1.ConfigFileGroup.modify_by:type_name -> google.protobuf.StringValue
	20,  // 8: v1.ConfigFileGroup.fileCount:type_name -> google.protobuf.UInt64Value
	21,  // 9: v1.ConfigFileGroup.user_ids:type_name -> google.protobuf.StringValue
	21,  // 10: v1.ConfigFileGroup.group_ids:type_name -> google.protobuf.StringValue
	21,  // 11: v1.ConfigFileGroup.remove_user_ids:type_name -> google.protobuf.StringValue
	21,  // 12: v1.ConfigFileGroup.remove_group_ids:type_name -> google.protobuf.StringValue
	22,  // 13: v1.ConfigFileGroup.editable:type_name -> google.protobuf.BoolValue
	21,  // 14: v1.ConfigFileGroup.owner:type_name -> google.protobuf.StringValue
	21,  // 15: v1.ConfigFileGroup.business:type_name -> google.protobuf.StringValue
	21,  // 16: v1.ConfigFileGroup.department:type_name -> google.protobuf.StringValue
	18,  // 17: v1.ConfigFileGroup.metadata:type_name -> v1.ConfigFileGroup.MetadataEntry
	22,  // 18: v1.ConfigFileGroup.deleteable:type_name -> google.protobuf.BoolValue
	20,  // 19: v1.ConfigFile.id:type_name -> google.protobuf.UInt64Value
	21,  // 20: v1.ConfigFile.name:type_name -> google.protobuf.StringValue
	21,  // 21: v1.ConfigFile.namespace:type_name -> google.protobuf.StringValue
	21,  // 22: v1.ConfigFile.group:type_name -> google.protobuf.StringValue
	21,  // 23: v1.ConfigFile.content:type_name -> google.protobuf.StringValue
	21,  // 24: v1.ConfigFile.format:type_name -> google.protobuf.StringValue
	21,  // 25: v1.ConfigFile.comment:type_name -> google.protobuf.StringValue
	21,  // 26: v1.ConfigFile.status:type_name -> google.protobuf.StringValue
	7,   // 27: v1.ConfigFile.tags:type_name -> v1.ConfigFileTag
	21,  // 28: v1.ConfigFile.create_time:type_name -> google.protobuf.StringValue
	21,  // 29: v1.ConfigFile.create_by:type_name -> google.protobuf.StringValue
	21,  // 30: v1.ConfigFile.modify_time:type_name -> google.protobuf.StringValue
	21,  // 31: v1.ConfigFile.modify_by:type_name -> google.protobuf.StringValue
	21,  // 32: v1.ConfigFile.release_time:type_name -> google.protobuf.StringValue
	21,  // 33: v1.ConfigFile.release_by:type_name -> google.protobuf.StringValue
	22,  // 34: v1.ConfigFile.encrypted:type_name -> google.protobuf.BoolValue
	21,  // 35: v1.ConfigFile.encrypt_algo:type_name -> google.protobuf.StringValue
	0,   // 36: v1.ConfigFile.pull_client:type_name -> v1.ConfigFilePullClient
	5,   // 37: v1.ConfigFile.persistent:type_name -> v1.ConfigFilePersistent
	21,  // 38: v1.ConfigFileTag.key:type_name -> google.protobuf.StringValue
	21,  // 39: v1.ConfigFileTag.value:type_name -> google.protobuf.StringValue
	20,  // 40: v1.ConfigFileRelease.id:type_name -> google.protobuf.UInt64Value
	21,  // 41: v1.ConfigFileRelease.name:type_name -> google.protobuf.StringValue
	21,  // 42: v1.ConfigFileRelease.namespace:type_name -> google.protobuf.StringValue
	21,  // 43: v1.ConfigFileRelease.group:type_name -> google.protobuf.StringValue
	21,  // 44: v1.ConfigFileRelease.file_name:type_name -> google.protobuf.StringValue
	21,  // 45: v1.ConfigFileRelease.content:type_name -> google.protobuf.StringValue
	21,  // 46: v1.ConfigFileRelease.comment:type_name -> google.protobuf.StringValue
	21,  // 47: v1.ConfigFileRelease.md5:type_name -> google.protobuf.StringValue
	20,  // 48: v1.ConfigFileRelease.version:type_name -> google.protobuf.UInt64Value
	21,  // 49: v1.ConfigFileRelease.create_time:type_name -> google.protobuf.StringValue
	21,  // 50: v1.ConfigFileRelease.create_by:type_name -> google.protobuf.StringValue
	21,  // 51: v1.ConfigFileRelease.modify_time:type_name -> google.protobuf.StringValue
	21,  // 52: v1.ConfigFileRelease.modify_by:type_name -> google.protobuf.StringValue
	7,   // 53: v1.ConfigFileRelease.tags:type_name -> v1.ConfigFileTag
	22,  // 54: v1.ConfigFileRelease.active:type_name -> google.protobuf.BoolValue
	21,  // 55: v1.ConfigFileRelease.format:type_name -> google.protobuf.StringValue
	21,  // 56: v1.ConfigFileRelease.release_description:type_name -> google.protobuf.StringValue
	21,  // 57: v1.ConfigFileRelease.release_type:type_name -> google.protobuf.StringValue
	23,  // 58: v1.ConfigFileRelease.beta_labels:type_name -> v1.ClientLabel
	20,  // 59: v1.ConfigFileRelease.config_file_id:type_name -> google.protobuf.UInt64Value
	0,   // 60: v1.ConfigFileRelease.pull_client:type_name -> v1.ConfigFilePullClient
	5,   // 61: v1.ConfigFileRelease.persistent:type_name -> v1.ConfigFilePersistent
	20,  // 62: v1.ConfigFileReleaseHistory.id:type_name -> google.protobuf.UInt64Value
	21,  // 63: v1.ConfigFileReleaseHistory.name:type_name -> google.protobuf.StringValue
	21,  // 64: v1.ConfigFileReleaseHistory.namespace:type_name -> google.protobuf.StringValue
	21,  // 65: v1.ConfigFileReleaseHistory.group:type_name -> google.protobuf.StringValue
	21,  // 66: v1.ConfigFileReleaseHistory.file_name:type_name -> google.protobuf.StringValue
	21,  // 67: v1.ConfigFileReleaseHistory.content:type_name -> google.protobuf.StringValue
	21,  // 68: v1.ConfigFileReleaseHistory.format:type_name -> google.protobuf.StringValue
	21,  // 69: v1.ConfigFileReleaseHistory.comment:type_name -> google.protobuf.StringValue
	21,  // 70: v1.ConfigFileReleaseHistory.md5:type_name -> google.protobuf.StringValue
	21,  // 71: v1.ConfigFileReleaseHistory.type:type_name -> google.protobuf.StringValue
	21,  // 72: v1.ConfigFileReleaseHistory.status:type_name -> google.protobuf.StringValue
	7,   // 73: v1.ConfigFileReleaseHistory.tags:type_name -> v1.ConfigFileTag
	21,  // 74: v1.ConfigFileReleaseHistory.create_time:type_name -> google.protobuf.StringValue
	21,  // 75: v1.ConfigFileReleaseHistory.create_by:type_name -> google.protobuf.StringValue
	21,  // 76: v1.ConfigFileReleaseHistory.modify_time:type_name -> google.protobuf.StringValue
	21,  // 77: v1.ConfigFileReleaseHistory.modify_by:type_name -> google.protobuf.StringValue
	21,  // 78: v1.ConfigFileReleaseHistory.reason:type_name -> google.protobuf.StringValue
	21,  // 79: v1.ConfigFileReleaseHistory.release_description:type_name -> google.protobuf.StringValue
	0,   // 80: v1.ConfigFileReleaseHistory.pull_client:type_name -> v1.ConfigFilePullClient
	5,   // 81: v1.ConfigFileReleaseHistory.persistent:type_name -> v1.ConfigFilePersistent
	20,  // 82: v1.ConfigFileTemplate.id:type_name -> google.protobuf.UInt64Value
	21,  // 83: v1.ConfigFileTemplate.name:type_name -> google.protobuf.StringValue
	21,  // 84: v1.ConfigFileTemplate.content:type_name -> google.protobuf.StringValue
	21,  // 85: v1.ConfigFileTemplate.format:type_name -> google.protobuf.StringValue
	21,  // 86: v1.ConfigFileTemplate.comment:type_name -> google.protobuf.StringValue
	21,  // 87: v1.ConfigFileTemplate.create_time:type_name -> google.protobuf.StringValue
	21,  // 88: v1.ConfigFileTemplate.create_by:type_name -> google.protobuf.StringValue
	21,  // 89: v1.ConfigFileTemplate.modify_time:type_name -> google.protobuf.StringValue
	21,  // 90: v1.ConfigFileTemplate.modify_by:type_name -> google.protobuf.StringValue
	21,  // 91: v1.ClientConfigFileInfo.namespace:type_name -> google.protobuf.StringValue
	21,  // 92: v1.ClientConfigFileInfo.group:type_name -> google.protobuf.StringValue
	21,  // 93: v1.ClientConfigFileInfo.file_name:type_name -> google.protobuf.StringValue
	21,  // 94: v1.ClientConfigFileInfo.content:type_name -> google.protobuf.StringValue
	20,  // 95: v1.ClientConfigFileInfo.version:type_name -> google.protobuf.UInt64Value
	21,  // 96: v1.ClientConfigFileInfo.md5:type_name -> google.protobuf.StringValue
	7,   // 97: v1.ClientConfigFileInfo.tags:type_name -> v1.ConfigFileTag
	22,  // 98: v1.ClientConfigFileInfo.encrypted:type_name -> google.protobuf.BoolValue
	21,  // 99: v1.ClientConfigFileInfo.public_key:type_name -> google.protobuf.StringValue
	21,  // 100: v1.ClientConfigFileInfo.name:type_name -> google.protobuf.StringValue
	21,  // 101: v1.ClientConfigFileInfo.release_time:type_name -> google.protobuf.StringValue
	1,   // 102: v1.ClientConfigFileInfo.request_mode:type_name -> v1.ConfigRequestMode
	0,   // 103: v1.ClientConfigFileInfo.pull_client:type_name -> v1.ConfigFilePullClient
	5,   // 104: v1.ClientConfigFileInfo.persistent:type_name -> v1.ConfigFilePersistent
	21,  // 105: v1.ClientWatchConfigFileRequest.client_ip:type_name -> google.protobuf.StringValue
	21,  // 106: v1.ClientWatchConfigFileRequest.service_name:type_name -> google.protobuf.StringValue
	11,  // 107: v1.ClientWatchConfigFileRequest.watch_files:type_name -> v1.ClientConfigFileInfo
	1,   // 108: v1.ClientWatchConfigFileRequest.request_mode:type_name -> v1.ConfigRequestMode
	0,   // 109: v1.ClientWatchConfigFileRequest.pull_client:type_name -> v1.ConfigFilePullClient
	5,   // 110: v1.ClientWatchConfigFileRequest.persistent:type_name -> v1.ConfigFilePersistent
	21,  // 111: v1.ConfigFileExportRequest.namespace:type_name -> google.protobuf.StringValue
	21,  // 112: v1.ConfigFileExportRequest.groups:type_name -> google.protobuf.StringValue
	21,  // 113: v1.ConfigFileExportRequest.names:type_name -> google.protobuf.StringValue
	20,  // 114: v1.ConfigFileExportRequest.ids:type_name -> google.protobuf.UInt64Value
	21,  // 115: v1.ConfigFilePublishInfo.release_name:type_name -> google.protobuf.StringValue
	21,  // 116: v1.ConfigFilePublishInfo.namespace:type_name -> google.protobuf.StringValue
	21,  // 117: v1.ConfigFilePublishInfo.group:type_name -> google.protobuf.StringValue
	21,  // 118: v1.ConfigFilePublishInfo.file_name:type_name -> google.protobuf.StringValue
	21,  // 119: v1.ConfigFilePublishInfo.content:type_name -> google.protobuf.StringValue
	21,  // 120: v1.ConfigFilePublishInfo.comment:type_name -> google.protobuf.StringValue
	21,  // 121: v1.ConfigFilePublishInfo.format:type_name -> google.protobuf.StringValue
	21,  // 122: v1.ConfigFilePublishInfo.release_description:type_name -> google.protobuf.StringValue
	21,  // 123: v1.ConfigFilePublishInfo.create_by:type_name -> google.protobuf.StringValue
	21,  // 124: v1.ConfigFilePublishInfo.modify_by:type_name -> google.protobuf.StringValue
	7,   // 125: v1.ConfigFilePublishInfo.tags:type_name -> v1.ConfigFileTag
	21,  // 126: v1.ConfigFilePublishInfo.md5:type_name -> google.protobuf.StringValue
	22,  // 127: v1.ConfigFilePublishInfo.encrypted:type_name -> google.protobuf.BoolValue
	21,  // 128: v1.ConfigFilePublishInfo.encrypt_algo:type_name -> google.protobuf.StringValue
	0,   // 129: v1.ConfigFilePublishInfo.pull_client:type_name -> v1.ConfigFilePullClient
	5,   // 130: v1.ConfigFilePublishInfo.persistent:type_name -> v1.ConfigFilePersistent
	21,  // 131: v1.ConfigFileGroupRequest.revision:type_name -> google.protobuf.StringValue
	4,   // 132: v1.ConfigFileGroupRequest.config_file_group:type_name -> v1.ConfigFileGroup
	19,  // 133: v1.ConfigFileGroupRequest.client_labels:type_name -> v1.ConfigFileGroupRequest.ClientLabelsEntry
	1,   // 134: v1.ConfigFileGroupRequest.request_mode:type_name -> v1.ConfigRequestMode
	0,   // 135: v1.ConfigFileGroupRequest.pull_client:type_name -> v1.ConfigFilePullClient
	5,   // 136: v1.ConfigFileGroupRequest.persistent:type_name -> v1.ConfigFilePersistent
	2,   // 137: v1.ConfigDiscoverRequest.type:type_name -> v1.ConfigDiscoverRequest.ConfigDiscoverRequestType
	11,  // 138: v1.ConfigDiscoverRequest.config_file:type_name -> v1.ClientConfigFileInfo
	3,   // 139: v1.ConfigDiscoverResponse.type:type_name -> v1.ConfigDiscoverResponse.ConfigDiscoverResponseType
	11,  // 140: v1.ConfigDiscoverResponse.config_file:type_name -> v1.ClientConfigFileInfo
	11,  // 141: v1.ConfigDiscoverResponse.config_file_names:type_name -> v1.ClientConfigFileInfo
	4,   // 142: v1.ConfigDiscoverResponse.config_file_groups:type_name -> v1.ConfigFileGroup
	143, // [143:143] is the sub-list for method output_type
	143, // [143:143] is the sub-list for method input_type
	143, // [143:143] is the sub-list for extension type_name
	143, // [143:143] is the sub-list for extension extendee
	0,   // [0:143] is the sub-list for field type_name
}

func init() { file_config_file_proto_init() }
func file_config_file_proto_init() {
	if File_config_file_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_config_file_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigFileGroup); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_file_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigFilePersistent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_file_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigFile); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_file_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigFileTag); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_file_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigFileRelease); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_file_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigFileReleaseHistory); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_file_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigFileTemplate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_file_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientConfigFileInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_file_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ClientWatchConfigFileRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_file_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigFileExportRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_file_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigFilePublishInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_file_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigFileGroupRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_file_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigDiscoverRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_config_file_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ConfigDiscoverResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_config_file_proto_rawDesc,
			NumEnums:      4,
			NumMessages:   16,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_config_file_proto_goTypes,
		DependencyIndexes: file_config_file_proto_depIdxs,
		EnumInfos:         file_config_file_proto_enumTypes,
		MessageInfos:      file_config_file_proto_msgTypes,
	}.Build()
	File_config_file_proto = out.File
	file_config_file_proto_rawDesc = nil
	file_config_file_proto_goTypes = nil
	file_config_file_proto_depIdxs = nil
}
